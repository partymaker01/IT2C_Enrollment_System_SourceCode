{
    "sourceFile": "ADMIN/Enrollment_Management/generate-student-id.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1749397708971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749397801466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,14 @@\n     $year = date('y');\r\n     \r\n     // Map programs to their abbreviations\r\n     $programCodes = [\r\n-        'Bachelor of Science in Information Technology' => 'IT',\r\n-        'Bachelor of Science in Computer Science' => 'CS', \r\n-        'Bachelor of Science in Business Administration' => 'BA',\r\n-        'Bachelor of Science in Hospitality Management' => 'HRMT',\r\n-        'Bachelor of Science in Tourism Management' => 'TM',\r\n-        'Associate in Computer Technology' => 'ACT',\r\n+        'Information Technology' => 'IT',\r\n+        'Computer Science' => 'HRMT', \r\n+        'in Business Administration' => 'BA',\r\n+        'Hospitality Management' => 'HRMT',\r\n+        'Tourism Management' => 'TM',\r\n+        '' => 'ACT',\r\n         // Add more programs as needed\r\n         'ECT' => 'ECT',\r\n         'HST' => 'HST',\r\n         'TVET' => 'TVET'\r\n"
                },
                {
                    "date": 1749397973550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n     \r\n     // Map programs to their abbreviations\r\n     $programCodes = [\r\n         'Information Technology' => 'IT',\r\n-        'Computer Science' => 'HRMT', \r\n-        'in Business Administration' => 'BA',\r\n-        'Hospitality Management' => 'HRMT',\r\n-        'Tourism Management' => 'TM',\r\n+        'hospital and restaurant management technology' => 'HRMT', \r\n+        'in Business Administration' => 'ECT',\r\n+        'Hospitality Management' => 'HST',\r\n+        'Tourism Management' => 'TVET',\r\n         '' => 'ACT',\r\n         // Add more programs as needed\r\n         'ECT' => 'ECT',\r\n         'HST' => 'HST',\r\n"
                },
                {
                    "date": 1749398022688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // Map programs to their abbreviations\r\n     $programCodes = [\r\n         'Information Technology' => 'IT',\r\n         'hospital and restaurant management technology' => 'HRMT', \r\n-        'in Business Administration' => 'ECT',\r\n+        'electronics and computer technology' => 'ECT',\r\n         'Hospitality Management' => 'HST',\r\n         'Tourism Management' => 'TVET',\r\n         '' => 'ACT',\r\n         // Add more programs as needed\r\n"
                },
                {
                    "date": 1749398569648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,13 @@\n     \r\n     // Map programs to their abbreviations\r\n     $programCodes = [\r\n         'Information Technology' => 'IT',\r\n-        'hospital and restaurant management technology' => 'HRMT', \r\n-        'electronics and computer technology' => 'ECT',\r\n-        'Hospitality Management' => 'HST',\r\n-        'Tourism Management' => 'TVET',\r\n-        '' => 'ACT',\r\n-        // Add more programs as needed\r\n-        'ECT' => 'ECT',\r\n-        'HST' => 'HST',\r\n-        'TVET' => 'TVET'\r\n+        'Hospital and Restaurant Management Technology' => 'HRMT', \r\n+        'Electronics and Computer Technology' => 'ECT',\r\n+        'Hospitality Services technology' => 'HST',\r\n+        'Techncal Vocational Education Techonlogy' => 'TVET',\r\n+        'Enterpreneurship Technology' => 'ET',\r\n     ];\r\n     \r\n     // Get program code\r\n     $programCode = $programCodes[$program] ?? 'GEN'; // Default to 'GEN' if not found\r\n"
                },
                {
                    "date": 1749404419384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     \r\n     // Map programs to their abbreviations\r\n     $programCodes = [\r\n         'Information Technology' => 'IT',\r\n-        'Hospital and Restaurant Management Technology' => 'HRMT', \r\n+        'Hotel and Restaurant Management Technology' => 'HRMT', \r\n         'Electronics and Computer Technology' => 'ECT',\r\n         'Hospitality Services technology' => 'HST',\r\n         'Techncal Vocational Education Techonlogy' => 'TVET',\r\n         'Enterpreneurship Technology' => 'ET',\r\n"
                },
                {
                    "date": 1749405787878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,19 +23,21 @@\n     // Create the base pattern\r\n     $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n     \r\n     // Get the highest existing number for this pattern\r\n-    $stmt = $conn->prepare(\"\r\n-        SELECT student_id \r\n-        FROM students \r\n-        WHERE student_id LIKE ? \r\n-        ORDER BY student_id DESC \r\n-        LIMIT 1\r\n-    \");\r\n-    $stmt->bind_param(\"s\", $basePattern . '%');\r\n-    $stmt->execute();\r\n-    $result = $stmt->get_result();\r\n-    $lastId = $result->fetch_column();\r\n+$stmt = $conn->prepare(\"\r\n+    SELECT student_id \r\n+    FROM students \r\n+    WHERE student_id LIKE ? \r\n+    ORDER BY student_id DESC \r\n+    LIMIT 1\r\n+\");\r\n+\r\n+$likePattern = $basePattern . '%'; // ðŸ›  Fix: store into a variable\r\n+$stmt->bind_param(\"s\", $likePattern); // Now passed by reference\r\n+$stmt->execute();\r\n+$result = $stmt->get_result();\r\n+$lastId = $result->fetch_column();\r\n     \r\n     if ($lastId) {\r\n         // Extract the number part and increment\r\n         $lastNumber = intval(substr($lastId, -4));\r\n"
                },
                {
                    "date": 1749407251292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,22 +23,25 @@\n     // Create the base pattern\r\n     $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n     \r\n     // Get the highest existing number for this pattern\r\n-$stmt = $conn->prepare(\"\r\n-    SELECT student_id \r\n-    FROM students \r\n-    WHERE student_id LIKE ? \r\n-    ORDER BY student_id DESC \r\n-    LIMIT 1\r\n-\");\r\n-\r\n-$likePattern = $basePattern . '%'; // ðŸ›  Fix: store into a variable\r\n-$stmt->bind_param(\"s\", $likePattern); // Now passed by reference\r\n-$stmt->execute();\r\n-$result = $stmt->get_result();\r\n-$lastId = $result->fetch_column();\r\n+    $stmt = $conn->prepare(\"\r\n+        SELECT student_id \r\n+        FROM students \r\n+        WHERE student_id LIKE ? \r\n+        ORDER BY student_id DESC \r\n+        LIMIT 1\r\n+    \");\r\n     \r\n+    $likePattern = $basePattern . '%';\r\n+    $stmt->bind_param(\"s\", $likePattern);\r\n+    $stmt->execute();\r\n+    $result = $stmt->get_result();\r\n+    \r\n+    // FIXED: Use fetch_assoc() instead of fetch_column()\r\n+    $row = $result->fetch_assoc();\r\n+    $lastId = $row ? $row['student_id'] : null;\r\n+    \r\n     if ($lastId) {\r\n         // Extract the number part and increment\r\n         $lastNumber = intval(substr($lastId, -4));\r\n         $newNumber = $lastNumber + 1;\r\n@@ -52,32 +55,80 @@\n     \r\n     return $basePattern . $formattedNumber;\r\n }\r\n \r\n-// Function to update student ID\r\n+// FIXED: Improved function to update student ID with better error handling\r\n function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n     try {\r\n+        // Start transaction\r\n         $conn->begin_transaction();\r\n         \r\n+        // Check if new student ID already exists\r\n+        $checkStmt = $conn->prepare(\"SELECT COUNT(*) as count FROM students WHERE student_id = ?\");\r\n+        $checkStmt->bind_param(\"s\", $newStudentId);\r\n+        $checkStmt->execute();\r\n+        $checkResult = $checkStmt->get_result()->fetch_assoc();\r\n+        \r\n+        if ($checkResult['count'] > 0) {\r\n+            throw new Exception(\"New Student ID already exists: \" . $newStudentId);\r\n+        }\r\n+        \r\n         // Update students table\r\n         $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n         \r\n+        if (!$stmt->execute()) {\r\n+            throw new Exception(\"Failed to update students table: \" . $stmt->error);\r\n+        }\r\n+        \r\n+        $studentsUpdated = $stmt->affected_rows;\r\n+        if ($studentsUpdated === 0) {\r\n+            throw new Exception(\"No student found with ID: \" . $oldStudentId);\r\n+        }\r\n+        \r\n         // Update enrollments table\r\n         $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n         \r\n-        // Update student_subjects table if it exists\r\n-        $stmt = $conn->prepare(\"UPDATE student_subjects SET student_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n+        if (!$stmt->execute()) {\r\n+            throw new Exception(\"Failed to update enrollments table: \" . $stmt->error);\r\n+        }\r\n         \r\n+        // Update student_subjects table if it exists (check if table exists first)\r\n+        $tableCheck = $conn->query(\"SHOW TABLES LIKE 'student_subjects'\");\r\n+        if ($tableCheck->num_rows > 0) {\r\n+            $stmt = $conn->prepare(\"UPDATE student_subjects SET student_id = ? WHERE student_id = ?\");\r\n+            $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+            \r\n+            if (!$stmt->execute()) {\r\n+                throw new Exception(\"Failed to update student_subjects table: \" . $stmt->error);\r\n+            }\r\n+        }\r\n+        \r\n+        // Update any other tables that might reference student_id\r\n+        // Add more tables here if needed\r\n+        \r\n+        // Commit transaction\r\n         $conn->commit();\r\n         return true;\r\n+        \r\n     } catch (Exception $e) {\r\n+        // Rollback transaction on error\r\n         $conn->rollback();\r\n+        \r\n+        // Log the error for debugging\r\n+        error_log(\"updateStudentId Error: \" . $e->getMessage());\r\n+        \r\n         return false;\r\n     }\r\n }\r\n-?>\r\n+\r\n+// FIXED: Add a function to check if student ID update is needed\r\n+function needsStudentIdUpdate($studentId) {\r\n+    return !preg_match('/^TLGC-/', $studentId);\r\n+}\r\n+\r\n+// FIXED: Add a function to validate student ID format\r\n+function validateStudentId($studentId) {\r\n+    return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $studentId);\r\n+}\r\n+?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749407669016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <?php\r\n-// Helper file para sa student ID generation\r\n-// I-save mo ito sa same folder ng process-enrollment.php\r\n+// Helper file para sa student ID generation with improved foreign key handling\r\n \r\n // Function to generate student ID based on program\r\n function generateStudentId($conn, $program) {\r\n     // Get current year (last 2 digits)\r\n@@ -17,9 +16,9 @@\n         'Enterpreneurship Technology' => 'ET',\r\n     ];\r\n     \r\n     // Get program code\r\n-    $programCode = $programCodes[$program] ?? 'GEN'; // Default to 'GEN' if not found\r\n+    $programCode = $programCodes[$program] ?? 'GEN';\r\n     \r\n     // Create the base pattern\r\n     $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n     \r\n@@ -27,18 +26,17 @@\n     $stmt = $conn->prepare(\"\r\n         SELECT student_id \r\n         FROM students \r\n         WHERE student_id LIKE ? \r\n-        ORDER BY student_id DESC \r\n+        ORDER BY CAST(SUBSTRING(student_id, -4) AS UNSIGNED) DESC\r\n         LIMIT 1\r\n     \");\r\n     \r\n     $likePattern = $basePattern . '%';\r\n     $stmt->bind_param(\"s\", $likePattern);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n     \r\n-    // FIXED: Use fetch_assoc() instead of fetch_column()\r\n     $row = $result->fetch_assoc();\r\n     $lastId = $row ? $row['student_id'] : null;\r\n     \r\n     if ($lastId) {\r\n@@ -55,11 +53,36 @@\n     \r\n     return $basePattern . $formattedNumber;\r\n }\r\n \r\n-// FIXED: Improved function to update student ID with better error handling\r\n+// Function to find all tables that reference student_id\r\n+function findTablesWithStudentId($conn) {\r\n+    $tables = [];\r\n+    \r\n+    // Get all tables in the database\r\n+    $result = $conn->query(\"SHOW TABLES\");\r\n+    $allTables = [];\r\n+    while ($row = $result->fetch_array()) {\r\n+        $allTables[] = $row[0];\r\n+    }\r\n+    \r\n+    // Check each table for student_id column\r\n+    foreach ($allTables as $table) {\r\n+        $result = $conn->query(\"SHOW COLUMNS FROM `{$table}` LIKE 'student_id'\");\r\n+        if ($result->num_rows > 0) {\r\n+            $tables[] = $table;\r\n+        }\r\n+    }\r\n+    \r\n+    return $tables;\r\n+}\r\n+\r\n+// IMPROVED: Function to update student ID with comprehensive foreign key handling\r\n function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n     try {\r\n+        // Disable foreign key checks temporarily\r\n+        $conn->query(\"SET FOREIGN_KEY_CHECKS = 0\");\r\n+        \r\n         // Start transaction\r\n         $conn->begin_transaction();\r\n         \r\n         // Check if new student ID already exists\r\n@@ -71,64 +94,174 @@\n         if ($checkResult['count'] > 0) {\r\n             throw new Exception(\"New Student ID already exists: \" . $newStudentId);\r\n         }\r\n         \r\n-        // Update students table\r\n-        $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+        // Find all tables that have student_id column\r\n+        $tablesWithStudentId = findTablesWithStudentId($conn);\r\n         \r\n-        if (!$stmt->execute()) {\r\n-            throw new Exception(\"Failed to update students table: \" . $stmt->error);\r\n+        $updatedTables = [];\r\n+        $errors = [];\r\n+        \r\n+        // Update each table\r\n+        foreach ($tablesWithStudentId as $table) {\r\n+            try {\r\n+                // Check if the old student_id exists in this table\r\n+                $checkStmt = $conn->prepare(\"SELECT COUNT(*) as count FROM `{$table}` WHERE student_id = ?\");\r\n+                $checkStmt->bind_param(\"s\", $oldStudentId);\r\n+                $checkStmt->execute();\r\n+                $checkResult = $checkStmt->get_result()->fetch_assoc();\r\n+                \r\n+                if ($checkResult['count'] > 0) {\r\n+                    // Update the table\r\n+                    $updateStmt = $conn->prepare(\"UPDATE `{$table}` SET student_id = ? WHERE student_id = ?\");\r\n+                    $updateStmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+                    \r\n+                    if (!$updateStmt->execute()) {\r\n+                        throw new Exception(\"Failed to update table {$table}: \" . $updateStmt->error);\r\n+                    }\r\n+                    \r\n+                    $updatedTables[] = $table . \" (\" . $updateStmt->affected_rows . \" rows)\";\r\n+                }\r\n+            } catch (Exception $e) {\r\n+                $errors[] = \"Table {$table}: \" . $e->getMessage();\r\n+            }\r\n         }\r\n         \r\n-        $studentsUpdated = $stmt->affected_rows;\r\n-        if ($studentsUpdated === 0) {\r\n-            throw new Exception(\"No student found with ID: \" . $oldStudentId);\r\n+        // If there were any errors, throw an exception\r\n+        if (!empty($errors)) {\r\n+            throw new Exception(\"Errors updating tables: \" . implode(\"; \", $errors));\r\n         }\r\n         \r\n-        // Update enrollments table\r\n+        // Re-enable foreign key checks\r\n+        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n+        \r\n+        // Commit transaction\r\n+        $conn->commit();\r\n+        \r\n+        // Log successful update\r\n+        error_log(\"Successfully updated Student ID from {$oldStudentId} to {$newStudentId}. Updated tables: \" . implode(\", \", $updatedTables));\r\n+        \r\n+        return true;\r\n+        \r\n+    } catch (Exception $e) {\r\n+        // Re-enable foreign key checks\r\n+        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n+        \r\n\\ No newline at end of file\n+        // Rollback transaction\r\n+        $conn->rollback();\r\n+        \r\n+        // Log detailed error\r\n+        error_log(\"updateStudentId Error: \" . $e->getMessage() . \" | Old ID: {$oldStudentId} | New ID: {$newStudentId}\");\r\n+        \r\n+        return false;\r\n+    }\r\n+}\r\n+\r\n+// Alternative approach: Instead of updating, create new record and transfer data\r\n+function migrateStudentId($conn, $oldStudentId, $newStudentId) {\r\n+    try {\r\n+        $conn->begin_transaction();\r\n+        \r\n+        // Get the original student record\r\n+        $stmt = $conn->prepare(\"SELECT * FROM students WHERE student_id = ?\");\r\n+        $stmt->bind_param(\"s\", $oldStudentId);\r\n+        $stmt->execute();\r\n+        $studentData = $stmt->get_result()->fetch_assoc();\r\n+        \r\n+        if (!$studentData) {\r\n+            throw new Exception(\"Student not found with ID: \" . $oldStudentId);\r\n+        }\r\n+        \r\n+        // Create new student record with new ID\r\n+        $columns = array_keys($studentData);\r\n+        $placeholders = str_repeat('?,', count($columns) - 1) . '?';\r\n+        $columnsList = '`' . implode('`, `', $columns) . '`';\r\n+        \r\n+        // Update the student_id in the data array\r\n+        $studentData['student_id'] = $newStudentId;\r\n+        \r\n+        $insertStmt = $conn->prepare(\"INSERT INTO students ({$columnsList}) VALUES ({$placeholders})\");\r\n+        $insertStmt->bind_param(str_repeat('s', count($studentData)), ...array_values($studentData));\r\n+        \r\n+        if (!$insertStmt->execute()) {\r\n+            throw new Exception(\"Failed to create new student record: \" . $insertStmt->error);\r\n+        }\r\n+        \r\n+        // Update enrollments to point to new student_id\r\n         $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+        $stmt->execute();\r\n         \r\n-        if (!$stmt->execute()) {\r\n-            throw new Exception(\"Failed to update enrollments table: \" . $stmt->error);\r\n-        }\r\n-        \r\n-        // Update student_subjects table if it exists (check if table exists first)\r\n-        $tableCheck = $conn->query(\"SHOW TABLES LIKE 'student_subjects'\");\r\n-        if ($tableCheck->num_rows > 0) {\r\n-            $stmt = $conn->prepare(\"UPDATE student_subjects SET student_id = ? WHERE student_id = ?\");\r\n-            $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-            \r\n-            if (!$stmt->execute()) {\r\n-                throw new Exception(\"Failed to update student_subjects table: \" . $stmt->error);\r\n+        // Update other tables if they exist\r\n+        $tablesWithStudentId = findTablesWithStudentId($conn);\r\n+        foreach ($tablesWithStudentId as $table) {\r\n+            if ($table !== 'students') { // Skip students table as we already handled it\r\n+                $stmt = $conn->prepare(\"UPDATE `{$table}` SET student_id = ? WHERE student_id = ?\");\r\n+                $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+                $stmt->execute();\r\n             }\r\n         }\r\n         \r\n-        // Update any other tables that might reference student_id\r\n-        // Add more tables here if needed\r\n+        // Delete the old student record\r\n+        $stmt = $conn->prepare(\"DELETE FROM students WHERE student_id = ?\");\r\n+        $stmt->bind_param(\"s\", $oldStudentId);\r\n+        $stmt->execute();\r\n         \r\n-        // Commit transaction\r\n         $conn->commit();\r\n         return true;\r\n         \r\n     } catch (Exception $e) {\r\n-        // Rollback transaction on error\r\n         $conn->rollback();\r\n-        \r\n-        // Log the error for debugging\r\n-        error_log(\"updateStudentId Error: \" . $e->getMessage());\r\n-        \r\n+        error_log(\"migrateStudentId Error: \" . $e->getMessage());\r\n         return false;\r\n     }\r\n }\r\n \r\n-// FIXED: Add a function to check if student ID update is needed\r\n+// Function to check if student ID update is needed\r\n function needsStudentIdUpdate($studentId) {\r\n     return !preg_match('/^TLGC-/', $studentId);\r\n }\r\n \r\n-// FIXED: Add a function to validate student ID format\r\n+// Function to validate student ID format\r\n function validateStudentId($studentId) {\r\n     return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $studentId);\r\n }\r\n-?>\n+\r\n+// Debug function to check what's preventing the update\r\n+function debugStudentIdUpdate($conn, $oldStudentId) {\r\n+    $debug = [];\r\n+    \r\n+    // Check if student exists\r\n+    $stmt = $conn->prepare(\"SELECT * FROM students WHERE student_id = ?\");\r\n+    $stmt->bind_param(\"s\", $oldStudentId);\r\n+    $stmt->execute();\r\n+    $student = $stmt->get_result()->fetch_assoc();\r\n+    $debug['student_exists'] = $student ? true : false;\r\n+    \r\n+    // Find all tables with student_id\r\n+    $tablesWithStudentId = findTablesWithStudentId($conn);\r\n+    $debug['tables_with_student_id'] = $tablesWithStudentId;\r\n+    \r\n+    // Check foreign key constraints\r\n+    $result = $conn->query(\"\r\n+        SELECT \r\n+            TABLE_NAME,\r\n+            COLUMN_NAME,\r\n+            CONSTRAINT_NAME,\r\n+            REFERENCED_TABLE_NAME,\r\n+            REFERENCED_COLUMN_NAME\r\n+        FROM \r\n+            INFORMATION_SCHEMA.KEY_COLUMN_USAGE \r\n+        WHERE \r\n+            REFERENCED_TABLE_NAME = 'students' \r\n+            AND REFERENCED_COLUMN_NAME = 'student_id'\r\n+    \");\r\n+    \r\n+    $foreignKeys = [];\r\n+    while ($row = $result->fetch_assoc()) {\r\n+        $foreignKeys[] = $row;\r\n+    }\r\n+    $debug['foreign_keys'] = $foreignKeys;\r\n+    \r\n+    return $debug;\r\n+}\r\n+?>\r\n"
                },
                {
                    "date": 1749408304600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,267 +1,46 @@\n <?php\r\n-// Helper file para sa student ID generation with improved foreign key handling\r\n+// Helper file for student ID generation that works with INT student_id\r\n \r\n-// Function to generate student ID based on program\r\n-function generateStudentId($conn, $program) {\r\n-    // Get current year (last 2 digits)\r\n-    $year = date('y');\r\n-    \r\n-    // Map programs to their abbreviations\r\n-    $programCodes = [\r\n-        'Information Technology' => 'IT',\r\n-        'Hotel and Restaurant Management Technology' => 'HRMT', \r\n-        'Electronics and Computer Technology' => 'ECT',\r\n-        'Hospitality Services technology' => 'HST',\r\n-        'Techncal Vocational Education Techonlogy' => 'TVET',\r\n-        'Enterpreneurship Technology' => 'ET',\r\n-    ];\r\n-    \r\n-    // Get program code\r\n-    $programCode = $programCodes[$program] ?? 'GEN';\r\n-    \r\n-    // Create the base pattern\r\n-    $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n-    \r\n-    // Get the highest existing number for this pattern\r\n-    $stmt = $conn->prepare(\"\r\n-        SELECT student_id \r\n-        FROM students \r\n-        WHERE student_id LIKE ? \r\n-        ORDER BY CAST(SUBSTRING(student_id, -4) AS UNSIGNED) DESC\r\n-        LIMIT 1\r\n-    \");\r\n-    \r\n-    $likePattern = $basePattern . '%';\r\n-    $stmt->bind_param(\"s\", $likePattern);\r\n+// Function to generate formatted student ID based on program\r\n+function generateFormattedId($conn, $program, $studentId) {\r\n+    // Use the SQL function we created\r\n+    $stmt = $conn->prepare(\"SELECT GenerateFormattedId(?, ?) as formatted_id\");\r\n+    $stmt->bind_param(\"si\", $program, $studentId);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n-    \r\n     $row = $result->fetch_assoc();\r\n-    $lastId = $row ? $row['student_id'] : null;\r\n-    \r\n-    if ($lastId) {\r\n-        // Extract the number part and increment\r\n-        $lastNumber = intval(substr($lastId, -4));\r\n-        $newNumber = $lastNumber + 1;\r\n-    } else {\r\n-        // First student for this program/year\r\n-        $newNumber = 1;\r\n-    }\r\n-    \r\n-    // Format with leading zeros\r\n-    $formattedNumber = str_pad($newNumber, 4, '0', STR_PAD_LEFT);\r\n-    \r\n-    return $basePattern . $formattedNumber;\r\n+    return $row['formatted_id'];\r\n }\r\n \r\n-// Function to find all tables that reference student_id\r\n-function findTablesWithStudentId($conn) {\r\n-    $tables = [];\r\n-    \r\n-    // Get all tables in the database\r\n-    $result = $conn->query(\"SHOW TABLES\");\r\n-    $allTables = [];\r\n-    while ($row = $result->fetch_array()) {\r\n-        $allTables[] = $row[0];\r\n-    }\r\n-    \r\n-    // Check each table for student_id column\r\n-    foreach ($allTables as $table) {\r\n-        $result = $conn->query(\"SHOW COLUMNS FROM `{$table}` LIKE 'student_id'\");\r\n-        if ($result->num_rows > 0) {\r\n-            $tables[] = $table;\r\n-        }\r\n-    }\r\n-    \r\n-    return $tables;\r\n+// Function to check if student needs a formatted ID\r\n+function needsFormattedId($conn, $studentId) {\r\n+    $stmt = $conn->prepare(\"SELECT formatted_id FROM students WHERE student_id = ?\");\r\n+    $stmt->bind_param(\"i\", $studentId);\r\n+    $stmt->execute();\r\n+    $result = $stmt->get_result();\r\n+    $row = $result->fetch_assoc();\r\n+    return empty($row['formatted_id']);\r\n }\r\n \r\n-// IMPROVED: Function to update student ID with comprehensive foreign key handling\r\n-function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n+// Function to update student's formatted ID\r\n+function updateFormattedId($conn, $studentId, $formattedId) {\r\n     try {\r\n-        // Disable foreign key checks temporarily\r\n-        $conn->query(\"SET FOREIGN_KEY_CHECKS = 0\");\r\n+        $stmt = $conn->prepare(\"UPDATE students SET formatted_id = ? WHERE student_id = ?\");\r\n+        $stmt->bind_param(\"si\", $formattedId, $studentId);\r\n         \r\n-        // Start transaction\r\n-        $conn->begin_transaction();\r\n-        \r\n-        // Check if new student ID already exists\r\n-        $checkStmt = $conn->prepare(\"SELECT COUNT(*) as count FROM students WHERE student_id = ?\");\r\n-        $checkStmt->bind_param(\"s\", $newStudentId);\r\n-        $checkStmt->execute();\r\n-        $checkResult = $checkStmt->get_result()->fetch_assoc();\r\n-        \r\n-        if ($checkResult['count'] > 0) {\r\n-            throw new Exception(\"New Student ID already exists: \" . $newStudentId);\r\n+        if (!$stmt->execute()) {\r\n+            throw new Exception(\"Failed to update formatted_id: \" . $stmt->error);\r\n         }\r\n         \r\n-        // Find all tables that have student_id column\r\n-        $tablesWithStudentId = findTablesWithStudentId($conn);\r\n-        \r\n-        $updatedTables = [];\r\n-        $errors = [];\r\n-        \r\n-        // Update each table\r\n-        foreach ($tablesWithStudentId as $table) {\r\n-            try {\r\n-                // Check if the old student_id exists in this table\r\n-                $checkStmt = $conn->prepare(\"SELECT COUNT(*) as count FROM `{$table}` WHERE student_id = ?\");\r\n-                $checkStmt->bind_param(\"s\", $oldStudentId);\r\n-                $checkStmt->execute();\r\n-                $checkResult = $checkStmt->get_result()->fetch_assoc();\r\n-                \r\n-                if ($checkResult['count'] > 0) {\r\n-                    // Update the table\r\n-                    $updateStmt = $conn->prepare(\"UPDATE `{$table}` SET student_id = ? WHERE student_id = ?\");\r\n-                    $updateStmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-                    \r\n-                    if (!$updateStmt->execute()) {\r\n-                        throw new Exception(\"Failed to update table {$table}: \" . $updateStmt->error);\r\n-                    }\r\n-                    \r\n-                    $updatedTables[] = $table . \" (\" . $updateStmt->affected_rows . \" rows)\";\r\n-                }\r\n-            } catch (Exception $e) {\r\n-                $errors[] = \"Table {$table}: \" . $e->getMessage();\r\n-            }\r\n-        }\r\n-        \r\n-        // If there were any errors, throw an exception\r\n-        if (!empty($errors)) {\r\n-            throw new Exception(\"Errors updating tables: \" . implode(\"; \", $errors));\r\n-        }\r\n-        \r\n-        // Re-enable foreign key checks\r\n-        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n-        \r\n-        // Commit transaction\r\n-        $conn->commit();\r\n-        \r\n-        // Log successful update\r\n-        error_log(\"Successfully updated Student ID from {$oldStudentId} to {$newStudentId}. Updated tables: \" . implode(\", \", $updatedTables));\r\n-        \r\n         return true;\r\n-        \r\n     } catch (Exception $e) {\r\n-        // Re-enable foreign key checks\r\n-        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n-        \r\n-        // Rollback transaction\r\n-        $conn->rollback();\r\n-        \r\n-        // Log detailed error\r\n-        error_log(\"updateStudentId Error: \" . $e->getMessage() . \" | Old ID: {$oldStudentId} | New ID: {$newStudentId}\");\r\n-        \r\n+        error_log(\"updateFormattedId Error: \" . $e->getMessage());\r\n         return false;\r\n     }\r\n }\r\n \r\n-// Alternative approach: Instead of updating, create new record and transfer data\r\n-function migrateStudentId($conn, $oldStudentId, $newStudentId) {\r\n-    try {\r\n-        $conn->begin_transaction();\r\n-        \r\n-        // Get the original student record\r\n-        $stmt = $conn->prepare(\"SELECT * FROM students WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"s\", $oldStudentId);\r\n-        $stmt->execute();\r\n-        $studentData = $stmt->get_result()->fetch_assoc();\r\n-        \r\n-        if (!$studentData) {\r\n-            throw new Exception(\"Student not found with ID: \" . $oldStudentId);\r\n-        }\r\n-        \r\n-        // Create new student record with new ID\r\n-        $columns = array_keys($studentData);\r\n-        $placeholders = str_repeat('?,', count($columns) - 1) . '?';\r\n-        $columnsList = '`' . implode('`, `', $columns) . '`';\r\n-        \r\n-        // Update the student_id in the data array\r\n-        $studentData['student_id'] = $newStudentId;\r\n-        \r\n-        $insertStmt = $conn->prepare(\"INSERT INTO students ({$columnsList}) VALUES ({$placeholders})\");\r\n-        $insertStmt->bind_param(str_repeat('s', count($studentData)), ...array_values($studentData));\r\n-        \r\n-        if (!$insertStmt->execute()) {\r\n-            throw new Exception(\"Failed to create new student record: \" . $insertStmt->error);\r\n-        }\r\n-        \r\n-        // Update enrollments to point to new student_id\r\n-        $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n-        \r\n-        // Update other tables if they exist\r\n-        $tablesWithStudentId = findTablesWithStudentId($conn);\r\n-        foreach ($tablesWithStudentId as $table) {\r\n-            if ($table !== 'students') { // Skip students table as we already handled it\r\n-                $stmt = $conn->prepare(\"UPDATE `{$table}` SET student_id = ? WHERE student_id = ?\");\r\n-                $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-                $stmt->execute();\r\n-            }\r\n-        }\r\n-        \r\n-        // Delete the old student record\r\n-        $stmt = $conn->prepare(\"DELETE FROM students WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"s\", $oldStudentId);\r\n-        $stmt->execute();\r\n-        \r\n-        $conn->commit();\r\n-        return true;\r\n-        \r\n-    } catch (Exception $e) {\r\n-        $conn->rollback();\r\n-        error_log(\"migrateStudentId Error: \" . $e->getMessage());\r\n-        return false;\r\n-    }\r\n+// Function to validate formatted ID format\r\n+function validateFormattedId($formattedId) {\r\n+    return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $formattedId);\r\n }\r\n-\r\n-// Function to check if student ID update is needed\r\n-function needsStudentIdUpdate($studentId) {\r\n-    return !preg_match('/^TLGC-/', $studentId);\r\n-}\r\n-\r\n-// Function to validate student ID format\r\n-function validateStudentId($studentId) {\r\n-    return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $studentId);\r\n-}\r\n-\r\n-// Debug function to check what's preventing the update\r\n-function debugStudentIdUpdate($conn, $oldStudentId) {\r\n-    $debug = [];\r\n-    \r\n-    // Check if student exists\r\n-    $stmt = $conn->prepare(\"SELECT * FROM students WHERE student_id = ?\");\r\n-    $stmt->bind_param(\"s\", $oldStudentId);\r\n-    $stmt->execute();\r\n-    $student = $stmt->get_result()->fetch_assoc();\r\n-    $debug['student_exists'] = $student ? true : false;\r\n-    \r\n-    // Find all tables with student_id\r\n-    $tablesWithStudentId = findTablesWithStudentId($conn);\r\n-    $debug['tables_with_student_id'] = $tablesWithStudentId;\r\n\\ No newline at end of file\n-    \r\n-    // Check foreign key constraints\r\n-    $result = $conn->query(\"\r\n-        SELECT \r\n-            TABLE_NAME,\r\n-            COLUMN_NAME,\r\n-            CONSTRAINT_NAME,\r\n-            REFERENCED_TABLE_NAME,\r\n-            REFERENCED_COLUMN_NAME\r\n-        FROM \r\n-            INFORMATION_SCHEMA.KEY_COLUMN_USAGE \r\n-        WHERE \r\n-            REFERENCED_TABLE_NAME = 'students' \r\n-            AND REFERENCED_COLUMN_NAME = 'student_id'\r\n-    \");\r\n-    \r\n-    $foreignKeys = [];\r\n-    while ($row = $result->fetch_assoc()) {\r\n-        $foreignKeys[] = $row;\r\n-    }\r\n-    $debug['foreign_keys'] = $foreignKeys;\r\n-    \r\n-    return $debug;\r\n-}\r\n-?>\n+?>\r\n"
                },
                {
                    "date": 1749408548735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,45 @@\n // Helper file for student ID generation that works with INT student_id\r\n \r\n // Function to generate formatted student ID based on program\r\n function generateFormattedId($conn, $program, $studentId) {\r\n-    // Use the SQL function we created\r\n-    $stmt = $conn->prepare(\"SELECT GenerateFormattedId(?, ?) as formatted_id\");\r\n+    // Get current year (last 2 digits)\r\n+    $year = date('y');\r\n+    \r\n+    // Map programs to their abbreviations\r\n+    $programCodes = [\r\n+        'Information Technology' => 'IT',\r\n+        'Hotel and Restaurant Management Technology' => 'HRMT', \r\n+        'Electronics and Computer Technology' => 'ECT',\r\n+        'Hospitality Services technology' => 'HST',\r\n+        'Techncal Vocational Education Techonlogy' => 'TVET',\r\n+        'Enterpreneurship Technology' => 'ET',\r\n+    ];\r\n+    \r\n+    // Get program code\r\n+    $programCode = $programCodes[$program] ?? 'GEN';\r\n+    \r\n+    // Create the base pattern\r\n+    $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n+    \r\n+    // Get count of students in this program to determine the number\r\n+    $stmt = $conn->prepare(\"\r\n+        SELECT COUNT(DISTINCT s.student_id) as count\r\n+        FROM students s \r\n+        JOIN enrollments e ON s.student_id = e.student_id \r\n+        WHERE e.program = ? \r\n+        AND s.student_id <= ?\r\n+    \");\r\n     $stmt->bind_param(\"si\", $program, $studentId);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n     $row = $result->fetch_assoc();\r\n-    return $row['formatted_id'];\r\n+    $number = $row['count'] ?: 1;\r\n+    \r\n+    // Format with leading zeros\r\n+    $formattedNumber = str_pad($number, 4, '0', STR_PAD_LEFT);\r\n+    \r\n+    return $basePattern . $formattedNumber;\r\n }\r\n \r\n // Function to check if student needs a formatted ID\r\n function needsFormattedId($conn, $studentId) {\r\n@@ -42,5 +72,16 @@\n // Function to validate formatted ID format\r\n function validateFormattedId($formattedId) {\r\n     return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $formattedId);\r\n }\r\n+\r\n+// Function to get student's display ID (formatted if available, otherwise numeric)\r\n+function getStudentDisplayId($conn, $studentId) {\r\n+    $stmt = $conn->prepare(\"SELECT formatted_id FROM students WHERE student_id = ?\");\r\n+    $stmt->bind_param(\"i\", $studentId);\r\n+    $stmt->execute();\r\n+    $result = $stmt->get_result();\r\n+    $row = $result->fetch_assoc();\r\n+    \r\n+    return $row['formatted_id'] ?: $studentId;\r\n+}\r\n ?>\r\n"
                },
                {
                    "date": 1749408968004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,5 +83,96 @@\n     $row = $result->fetch_assoc();\r\n     \r\n     return $row['formatted_id'] ?: $studentId;\r\n }\r\n+\r\n+// For backward compatibility with your existing code\r\n+function generateStudentId($conn, $program) {\r\n+    return generateFormattedId($conn, $program, 0);\r\n+}\r\n+\r\n+function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n+    // This is just a stub for backward compatibility\r\n+    // Your system now uses formatted_id instead of changing the actual student_id\r\n+    return true;\r\n+}\r\n+\r\n+function needsStudentIdUpdate($studentId) {\r\n+    return !preg_match('/^TLGC-/', $studentId);\r\n+}\r\n+\r\n+function validateStudentId($studentId) {\r\n+    return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $studentId);\r\n+}\r\n+\r\n+// Debug function to help troubleshoot issues\r\n+function debugStudentIdUpdate($conn, $studentId) {\r\n+    $info = [];\r\n+    \r\n+    // Check if student exists\r\n+    $stmt = $conn->prepare(\"SELECT * FROM students WHERE student_id = ?\");\r\n+    $stmt->bind_param(\"i\", $studentId);\r\n+    $stmt->execute();\r\n+    $result = $stmt->get_result();\r\n+    $info['student_exists'] = $result->num_rows > 0;\r\n+    \r\n+    // Check if formatted_id column exists\r\n+    $checkColumn = $conn->query(\"SHOW COLUMNS FROM students LIKE 'formatted_id'\");\r\n+    $info['formatted_id_column_exists'] = $checkColumn->num_rows > 0;\r\n+    \r\n+    // Get tables with student_id column\r\n+    $result = $conn->query(\"\r\n+        SELECT TABLE_NAME \r\n+        FROM INFORMATION_SCHEMA.COLUMNS \r\n+        WHERE COLUMN_NAME = 'student_id' \r\n+        AND TABLE_SCHEMA = DATABASE()\r\n+    \");\r\n+    \r\n+    $tables = [];\r\n+    while ($row = $result->fetch_assoc()) {\r\n+        $tables[] = $row['TABLE_NAME'];\r\n+    }\r\n+    $info['tables_with_student_id'] = $tables;\r\n+    \r\n+    return $info;\r\n+}\r\n+\r\n+// Alternative method for updating student IDs if the standard method fails\r\n+function migrateStudentId($conn, $oldStudentId, $newStudentId) {\r\n+    try {\r\n+        // Disable foreign key checks temporarily\r\n+        $conn->query(\"SET FOREIGN_KEY_CHECKS = 0\");\r\n+        $conn->begin_transaction();\r\n+        \r\n+        // Get all tables with student_id column\r\n+        $result = $conn->query(\"\r\n+            SELECT TABLE_NAME \r\n+            FROM INFORMATION_SCHEMA.COLUMNS \r\n+            WHERE COLUMN_NAME = 'student_id' \r\n+            AND TABLE_SCHEMA = DATABASE()\r\n+        \");\r\n+        \r\n+        $tables = [];\r\n+        while ($row = $result->fetch_assoc()) {\r\n+            $tables[] = $row['TABLE_NAME'];\r\n+        }\r\n+        \r\n+        // Update each table\r\n+        foreach ($tables as $table) {\r\n+            $stmt = $conn->prepare(\"UPDATE `{$table}` SET student_id = ? WHERE student_id = ?\");\r\n+            $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+            $stmt->execute();\r\n+        }\r\n+        \r\n+        // Re-enable foreign key checks\r\n+        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n+        $conn->commit();\r\n+        \r\n+        return true;\r\n+    } catch (Exception $e) {\r\n+        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n+        $conn->rollback();\r\n+        error_log(\"migrateStudentId Error: \" . $e->getMessage());\r\n+        return false;\r\n+    }\r\n+}\r\n ?>\r\n"
                },
                {
                    "date": 1749410066450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,178 +1,57 @@\n <?php\r\n-// Helper file for student ID generation that works with INT student_id\r\n+/**\r\n+ * Student ID Generation and Management Functions\r\n+ */\r\n \r\n-// Function to generate formatted student ID based on program\r\n-function generateFormattedId($conn, $program, $studentId) {\r\n-    // Get current year (last 2 digits)\r\n-    $year = date('y');\r\n-    \r\n-    // Map programs to their abbreviations\r\n-    $programCodes = [\r\n-        'Information Technology' => 'IT',\r\n-        'Hotel and Restaurant Management Technology' => 'HRMT', \r\n-        'Electronics and Computer Technology' => 'ECT',\r\n-        'Hospitality Services technology' => 'HST',\r\n-        'Techncal Vocational Education Techonlogy' => 'TVET',\r\n-        'Enterpreneurship Technology' => 'ET',\r\n-    ];\r\n-    \r\n-    // Get program code\r\n-    $programCode = $programCodes[$program] ?? 'GEN';\r\n-    \r\n-    // Create the base pattern\r\n-    $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n-    \r\n-    // Get count of students in this program to determine the number\r\n-    $stmt = $conn->prepare(\"\r\n-        SELECT COUNT(DISTINCT s.student_id) as count\r\n-        FROM students s \r\n-        JOIN enrollments e ON s.student_id = e.student_id \r\n-        WHERE e.program = ? \r\n-        AND s.student_id <= ?\r\n-    \");\r\n-    $stmt->bind_param(\"si\", $program, $studentId);\r\n-    $stmt->execute();\r\n-    $result = $stmt->get_result();\r\n-    $row = $result->fetch_assoc();\r\n-    $number = $row['count'] ?: 1;\r\n-    \r\n-    // Format with leading zeros\r\n-    $formattedNumber = str_pad($number, 4, '0', STR_PAD_LEFT);\r\n-    \r\n-    return $basePattern . $formattedNumber;\r\n-}\r\n-\r\n-// Function to check if student needs a formatted ID\r\n function needsFormattedId($conn, $studentId) {\r\n     $stmt = $conn->prepare(\"SELECT formatted_id FROM students WHERE student_id = ?\");\r\n     $stmt->bind_param(\"i\", $studentId);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n     $row = $result->fetch_assoc();\r\n+    \r\n     return empty($row['formatted_id']);\r\n }\r\n \r\n-// Function to update student's formatted ID\r\n-function updateFormattedId($conn, $studentId, $formattedId) {\r\n-    try {\r\n-        $stmt = $conn->prepare(\"UPDATE students SET formatted_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"si\", $formattedId, $studentId);\r\n-        \r\n-        if (!$stmt->execute()) {\r\n-            throw new Exception(\"Failed to update formatted_id: \" . $stmt->error);\r\n-        }\r\n-        \r\n-        return true;\r\n-    } catch (Exception $e) {\r\n-        error_log(\"updateFormattedId Error: \" . $e->getMessage());\r\n-        return false;\r\n-    }\r\n+function generateFormattedId($conn, $program, $studentId) {\r\n+    // Get current year\r\n+    $currentYear = date('Y');\r\n+    \r\n+    // Program code mapping\r\n+    $programCodes = [\r\n+        'BSIT' => 'IT',\r\n+        'BSCS' => 'CS',\r\n+        'BSIS' => 'IS',\r\n+        'BSBA' => 'BA',\r\n+        'BSED' => 'ED',\r\n+        'BEED' => 'EE',\r\n+        // Add more program codes as needed\r\n+    ];\r\n+    \r\n+    // Get program code or use first 2 letters if not found\r\n+    $programCode = $programCodes[$program] ?? strtoupper(substr($program, 0, 2));\r\n+    \r\n+    // Format: YYYY-PROGRAM-XXXX (e.g., 2024-IT-0001)\r\n+    $formattedId = sprintf(\"%s-%s-%04d\", $currentYear, $programCode, $studentId);\r\n+    \r\n+    return $formattedId;\r\n }\r\n \r\n-// Function to validate formatted ID format\r\n function validateFormattedId($formattedId) {\r\n-    return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $formattedId);\r\n+    // Check if the formatted ID matches the expected pattern\r\n+    return preg_match('/^\\d{4}-[A-Z]{2,3}-\\d{4}$/', $formattedId);\r\n }\r\n \r\n-// Function to get student's display ID (formatted if available, otherwise numeric)\r\n-function getStudentDisplayId($conn, $studentId) {\r\n-    $stmt = $conn->prepare(\"SELECT formatted_id FROM students WHERE student_id = ?\");\r\n-    $stmt->bind_param(\"i\", $studentId);\r\n-    $stmt->execute();\r\n-    $result = $stmt->get_result();\r\n-    $row = $result->fetch_assoc();\r\n+function updateFormattedId($conn, $studentId, $formattedId) {\r\n+    $stmt = $conn->prepare(\"UPDATE students SET formatted_id = ? WHERE student_id = ?\");\r\n+    $stmt->bind_param(\"si\", $formattedId, $studentId);\r\n     \r\n-    return $row['formatted_id'] ?: $studentId;\r\n-}\r\n-\r\n-// For backward compatibility with your existing code\r\n-function generateStudentId($conn, $program) {\r\n-    return generateFormattedId($conn, $program, 0);\r\n-}\r\n-\r\n-function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n-    // This is just a stub for backward compatibility\r\n-    // Your system now uses formatted_id instead of changing the actual student_id\r\n-    return true;\r\n-}\r\n-\r\n-function needsStudentIdUpdate($studentId) {\r\n-    return !preg_match('/^TLGC-/', $studentId);\r\n-}\r\n-\r\n-function validateStudentId($studentId) {\r\n-    return preg_match('/^TLGC-[A-Z]+-\\d{2}-\\d{4}$/', $studentId);\r\n-}\r\n-\r\n-// Debug function to help troubleshoot issues\r\n-function debugStudentIdUpdate($conn, $studentId) {\r\n-    $info = [];\r\n-    \r\n-    // Check if student exists\r\n-    $stmt = $conn->prepare(\"SELECT * FROM students WHERE student_id = ?\");\r\n-    $stmt->bind_param(\"i\", $studentId);\r\n-    $stmt->execute();\r\n-    $result = $stmt->get_result();\r\n-    $info['student_exists'] = $result->num_rows > 0;\r\n-    \r\n-    // Check if formatted_id column exists\r\n-    $checkColumn = $conn->query(\"SHOW COLUMNS FROM students LIKE 'formatted_id'\");\r\n-    $info['formatted_id_column_exists'] = $checkColumn->num_rows > 0;\r\n-    \r\n-    // Get tables with student_id column\r\n-    $result = $conn->query(\"\r\n-        SELECT TABLE_NAME \r\n-        FROM INFORMATION_SCHEMA.COLUMNS \r\n-        WHERE COLUMN_NAME = 'student_id' \r\n-        AND TABLE_SCHEMA = DATABASE()\r\n-    \");\r\n-    \r\n-    $tables = [];\r\n-    while ($row = $result->fetch_assoc()) {\r\n-        $tables[] = $row['TABLE_NAME'];\r\n-    }\r\n-    $info['tables_with_student_id'] = $tables;\r\n-    \r\n-    return $info;\r\n-}\r\n-\r\n-// Alternative method for updating student IDs if the standard method fails\r\n-function migrateStudentId($conn, $oldStudentId, $newStudentId) {\r\n-    try {\r\n-        // Disable foreign key checks temporarily\r\n-        $conn->query(\"SET FOREIGN_KEY_CHECKS = 0\");\r\n-        $conn->begin_transaction();\r\n-        \r\n-        // Get all tables with student_id column\r\n-        $result = $conn->query(\"\r\n-            SELECT TABLE_NAME \r\n-            FROM INFORMATION_SCHEMA.COLUMNS \r\n-            WHERE COLUMN_NAME = 'student_id' \r\n-            AND TABLE_SCHEMA = DATABASE()\r\n-        \");\r\n-        \r\n-        $tables = [];\r\n-        while ($row = $result->fetch_assoc()) {\r\n-            $tables[] = $row['TABLE_NAME'];\r\n-        }\r\n-        \r\n-        // Update each table\r\n-        foreach ($tables as $table) {\r\n-            $stmt = $conn->prepare(\"UPDATE `{$table}` SET student_id = ? WHERE student_id = ?\");\r\n-            $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-            $stmt->execute();\r\n-        }\r\n-        \r\n-        // Re-enable foreign key checks\r\n-        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n-        $conn->commit();\r\n-        \r\n+    if ($stmt->execute()) {\r\n+        error_log(\"Updated formatted ID for student {$studentId}: {$formattedId}\");\r\n         return true;\r\n-    } catch (Exception $e) {\r\n-        $conn->query(\"SET FOREIGN_KEY_CHECKS = 1\");\r\n-        $conn->rollback();\r\n-        error_log(\"migrateStudentId Error: \" . $e->getMessage());\r\n+    } else {\r\n+        error_log(\"Failed to update formatted ID for student {$studentId}: \" . $stmt->error);\r\n         return false;\r\n     }\r\n }\r\n-?>\r\n+?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749410749532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,81 @@\n <?php\r\n-/**\r\n- * Student ID Generation and Management Functions\r\n- */\r\n+// Helper file para sa student ID generation\r\n+// I-save mo ito sa same folder ng process-enrollment.php\r\n \r\n-function needsFormattedId($conn, $studentId) {\r\n-    $stmt = $conn->prepare(\"SELECT formatted_id FROM students WHERE student_id = ?\");\r\n-    $stmt->bind_param(\"i\", $studentId);\r\n-    $stmt->execute();\r\n-    $result = $stmt->get_result();\r\n-    $row = $result->fetch_assoc();\r\n+// Function to generate student ID based on program\r\n+function generateStudentId($conn, $program) {\r\n+    // Get current year (last 2 digits)\r\n+    $year = date('y');\r\n     \r\n-    return empty($row['formatted_id']);\r\n-}\r\n-\r\n-function generateFormattedId($conn, $program, $studentId) {\r\n-    // Get current year\r\n-    $currentYear = date('Y');\r\n-    \r\n-    // Program code mapping\r\n+    // Map programs to their abbreviations\r\n     $programCodes = [\r\n-        'BSIT' => 'IT',\r\n-        'BSCS' => 'CS',\r\n-        'BSIS' => 'IS',\r\n-        'BSBA' => 'BA',\r\n-        'BSED' => 'ED',\r\n-        'BEED' => 'EE',\r\n-        // Add more program codes as needed\r\n+        'Information Technology' => 'IT',\r\n+        'Hotel and Restaurant Management Technology' => 'HRMT', \r\n+        'Electronics and Computer Technology' => 'ECT',\r\n+        'Hospitality Services technology' => 'HST',\r\n+        'Techncal Vocational Education Techonlogy' => 'TVET',\r\n+        'Enterpreneurship Technology' => 'ET',\r\n     ];\r\n     \r\n-    // Get program code or use first 2 letters if not found\r\n-    $programCode = $programCodes[$program] ?? strtoupper(substr($program, 0, 2));\r\n+    // Get program code\r\n+    $programCode = $programCodes[$program] ?? 'GEN'; // Default to 'GEN' if not found\r\n     \r\n-    // Format: YYYY-PROGRAM-XXXX (e.g., 2024-IT-0001)\r\n-    $formattedId = sprintf(\"%s-%s-%04d\", $currentYear, $programCode, $studentId);\r\n+    // Create the base pattern\r\n+    $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n     \r\n-    return $formattedId;\r\n+    // Get the highest existing number for this pattern\r\n+    $stmt = $conn->prepare(\"\r\n+        SELECT student_id \r\n+        FROM students \r\n+        WHERE student_id LIKE ? \r\n+        ORDER BY student_id DESC \r\n+        LIMIT 1\r\n+    \");\r\n+    $stmt->bind_param(\"s\", $basePattern . '%');\r\n+    $stmt->execute();\r\n+    $result = $stmt->get_result();\r\n+    $lastId = $result->fetch_column();\r\n+    \r\n+    if ($lastId) {\r\n+        // Extract the number part and increment\r\n+        $lastNumber = intval(substr($lastId, -4));\r\n+        $newNumber = $lastNumber + 1;\r\n+    } else {\r\n+        // First student for this program/year\r\n+        $newNumber = 1;\r\n+    }\r\n+    \r\n+    // Format with leading zeros\r\n+    $formattedNumber = str_pad($newNumber, 4, '0', STR_PAD_LEFT);\r\n+    \r\n+    return $basePattern . $formattedNumber;\r\n }\r\n \r\n-function validateFormattedId($formattedId) {\r\n-    // Check if the formatted ID matches the expected pattern\r\n-    return preg_match('/^\\d{4}-[A-Z]{2,3}-\\d{4}$/', $formattedId);\r\n-}\r\n-\r\n-function updateFormattedId($conn, $studentId, $formattedId) {\r\n-    $stmt = $conn->prepare(\"UPDATE students SET formatted_id = ? WHERE student_id = ?\");\r\n-    $stmt->bind_param(\"si\", $formattedId, $studentId);\r\n-    \r\n-    if ($stmt->execute()) {\r\n-        error_log(\"Updated formatted ID for student {$studentId}: {$formattedId}\");\r\n+// Function to update student ID\r\n+function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n+    try {\r\n+        $conn->begin_transaction();\r\n+        \r\n+        // Update students table\r\n+        $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n+        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+        $stmt->execute();\r\n+        \r\n+        // Update enrollments table\r\n+        $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n+        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+        $stmt->execute();\r\n+        \r\n+        // Update student_subjects table if it exists\r\n+        $stmt = $conn->prepare(\"UPDATE student_subjects SET student_id = ? WHERE student_id = ?\");\r\n+        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n+        $stmt->execute();\r\n+        \r\n+        $conn->commit();\r\n         return true;\r\n-    } else {\r\n-        error_log(\"Failed to update formatted ID for student {$studentId}: \" . $stmt->error);\r\n+    } catch (Exception $e) {\r\n+        $conn->rollback();\r\n         return false;\r\n     }\r\n }\r\n ?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749410904480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,16 +23,17 @@\n     // Create the base pattern\r\n     $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n     \r\n     // Get the highest existing number for this pattern\r\n-    $stmt = $conn->prepare(\"\r\n-        SELECT student_id \r\n-        FROM students \r\n-        WHERE student_id LIKE ? \r\n-        ORDER BY student_id DESC \r\n-        LIMIT 1\r\n-    \");\r\n-    $stmt->bind_param(\"s\", $basePattern . '%');\r\n+$stmt = $conn->prepare(\"\r\n+    SELECT student_id \r\n+    FROM students \r\n+    WHERE student_id LIKE ? \r\n+    ORDER BY student_id DESC \r\n+    LIMIT 1\r\n+\");\r\n+$likePattern = $basePattern . '%';\r\n+$stmt->bind_param(\"s\", $likePattern);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n     $lastId = $result->fetch_column();\r\n     \r\n"
                },
                {
                    "date": 1749411109748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,31 +52,30 @@\n     return $basePattern . $formattedNumber;\r\n }\r\n \r\n // Function to update student ID\r\n-function updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n+function updateStudentId($conn, $oldId, $newId) {\r\n+    $conn->begin_transaction();\r\n     try {\r\n-        $conn->begin_transaction();\r\n-        \r\n         // Update students table\r\n         $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n-        \r\n+        $stmt->bind_param(\"ss\", $newId, $oldId);\r\n+        if (!$stmt->execute()) {\r\n+            throw new Exception(\"Failed to update students table\");\r\n+        }\r\n+\r\n         // Update enrollments table\r\n         $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n-        \r\n-        // Update student_subjects table if it exists\r\n-        $stmt = $conn->prepare(\"UPDATE student_subjects SET student_id = ? WHERE student_id = ?\");\r\n-        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n-        $stmt->execute();\r\n-        \r\n+        $stmt->bind_param(\"ss\", $newId, $oldId);\r\n+        if (!$stmt->execute()) {\r\n+            throw new Exception(\"Failed to update enrollments table\");\r\n+        }\r\n+\r\n         $conn->commit();\r\n         return true;\r\n     } catch (Exception $e) {\r\n         $conn->rollback();\r\n+        error_log(\"updateStudentId error: \" . $e->getMessage());\r\n         return false;\r\n     }\r\n }\r\n ?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749411231360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,5 +77,16 @@\n         error_log(\"updateStudentId error: \" . $e->getMessage());\r\n         return false;\r\n     }\r\n }\r\n+\r\n+$stmt = $conn->prepare(\"SELECT COUNT(*) FROM students WHERE student_id = ?\");\r\n+$stmt->bind_param(\"s\", $currentStudentId);\r\n+$stmt->execute();\r\n+$stmt->bind_result($count);\r\n+$stmt->fetch();\r\n+$stmt->close();\r\n+\r\n+if ($count == 0) {\r\n+    throw new Exception(\"Old student ID not found in students table: $currentStudentId\");\r\n+}\r\n ?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749411421990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,5 +88,6 @@\n \r\n if ($count == 0) {\r\n     throw new Exception(\"Old student ID not found in students table: $currentStudentId\");\r\n }\r\n+\r\n ?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749411665266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,5 +89,13 @@\n if ($count == 0) {\r\n     throw new Exception(\"Old student ID not found in students table: $currentStudentId\");\r\n }\r\n \r\n+if (!isset($currentStudentId)) {\r\n+    // Try to get it from GET or POST\r\n+    $currentStudentId = $_GET['student_id'] ?? $_POST['student_id'] ?? null;\r\n+}\r\n+\r\n+if (!$currentStudentId) {\r\n+    throw new Exception(\"Student ID not provided for update.\");\r\n+}\r\n ?>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749411727428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,56 @@\n <?php\r\n // Helper file para sa student ID generation\r\n-// I-save mo ito sa same folder ng process-enrollment.php\r\n \r\n // Function to generate student ID based on program\r\n function generateStudentId($conn, $program) {\r\n-    // Get current year (last 2 digits)\r\n     $year = date('y');\r\n-    \r\n-    // Map programs to their abbreviations\r\n+\r\n     $programCodes = [\r\n         'Information Technology' => 'IT',\r\n         'Hotel and Restaurant Management Technology' => 'HRMT', \r\n         'Electronics and Computer Technology' => 'ECT',\r\n         'Hospitality Services technology' => 'HST',\r\n         'Techncal Vocational Education Techonlogy' => 'TVET',\r\n         'Enterpreneurship Technology' => 'ET',\r\n     ];\r\n-    \r\n-    // Get program code\r\n-    $programCode = $programCodes[$program] ?? 'GEN'; // Default to 'GEN' if not found\r\n-    \r\n-    // Create the base pattern\r\n+\r\n+    $programCode = $programCodes[$program] ?? 'GEN';\r\n     $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n-    \r\n-    // Get the highest existing number for this pattern\r\n-$stmt = $conn->prepare(\"\r\n-    SELECT student_id \r\n-    FROM students \r\n-    WHERE student_id LIKE ? \r\n-    ORDER BY student_id DESC \r\n-    LIMIT 1\r\n-\");\r\n-$likePattern = $basePattern . '%';\r\n-$stmt->bind_param(\"s\", $likePattern);\r\n+\r\n+    $stmt = $conn->prepare(\"\r\n+        SELECT student_id \r\n+        FROM students \r\n+        WHERE student_id LIKE ? \r\n+        ORDER BY student_id DESC \r\n+        LIMIT 1\r\n+    \");\r\n+    $likePattern = $basePattern . '%';\r\n+    $stmt->bind_param(\"s\", $likePattern);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n     $lastId = $result->fetch_column();\r\n-    \r\n+\r\n     if ($lastId) {\r\n-        // Extract the number part and increment\r\n         $lastNumber = intval(substr($lastId, -4));\r\n         $newNumber = $lastNumber + 1;\r\n     } else {\r\n-        // First student for this program/year\r\n         $newNumber = 1;\r\n     }\r\n-    \r\n-    // Format with leading zeros\r\n+\r\n     $formattedNumber = str_pad($newNumber, 4, '0', STR_PAD_LEFT);\r\n-    \r\n     return $basePattern . $formattedNumber;\r\n }\r\n \r\n-// Function to update student ID\r\n function updateStudentId($conn, $oldId, $newId) {\r\n     $conn->begin_transaction();\r\n     try {\r\n-        // Update students table\r\n         $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newId, $oldId);\r\n         if (!$stmt->execute()) {\r\n             throw new Exception(\"Failed to update students table\");\r\n         }\r\n \r\n-        // Update enrollments table\r\n         $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newId, $oldId);\r\n         if (!$stmt->execute()) {\r\n             throw new Exception(\"Failed to update enrollments table\");\r\n@@ -78,8 +64,16 @@\n         return false;\r\n     }\r\n }\r\n \r\n+// âœ… Fix: Get $currentStudentId BEFORE using it\r\n+$currentStudentId = $_GET['student_id'] ?? $_POST['student_id'] ?? null;\r\n+\r\n+if (!$currentStudentId) {\r\n+    throw new Exception(\"Student ID not provided for update.\");\r\n+}\r\n+\r\n+// âœ… Now safe to check in DB\r\n $stmt = $conn->prepare(\"SELECT COUNT(*) FROM students WHERE student_id = ?\");\r\n $stmt->bind_param(\"s\", $currentStudentId);\r\n $stmt->execute();\r\n $stmt->bind_result($count);\r\n@@ -88,14 +82,5 @@\n \r\n if ($count == 0) {\r\n     throw new Exception(\"Old student ID not found in students table: $currentStudentId\");\r\n }\r\n-\r\n-if (!isset($currentStudentId)) {\r\n-    // Try to get it from GET or POST\r\n-    $currentStudentId = $_GET['student_id'] ?? $_POST['student_id'] ?? null;\r\n-}\r\n-\r\n-if (!$currentStudentId) {\r\n-    throw new Exception(\"Student ID not provided for update.\");\r\n-}\r\n-?>\n\\ No newline at end of file\n+?>\r\n"
                },
                {
                    "date": 1749411778344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,24 +63,5 @@\n         error_log(\"updateStudentId error: \" . $e->getMessage());\r\n         return false;\r\n     }\r\n }\r\n-\r\n-// âœ… Fix: Get $currentStudentId BEFORE using it\r\n-$currentStudentId = $_GET['student_id'] ?? $_POST['student_id'] ?? null;\r\n-\r\n-if (!$currentStudentId) {\r\n-    throw new Exception(\"Student ID not provided for update.\");\r\n-}\r\n-\r\n-// âœ… Now safe to check in DB\r\n-$stmt = $conn->prepare(\"SELECT COUNT(*) FROM students WHERE student_id = ?\");\r\n-$stmt->bind_param(\"s\", $currentStudentId);\r\n-$stmt->execute();\r\n-$stmt->bind_result($count);\r\n-$stmt->fetch();\r\n-$stmt->close();\r\n-\r\n-if ($count == 0) {\r\n-    throw new Exception(\"Old student ID not found in students table: $currentStudentId\");\r\n-}\r\n ?>\r\n"
                },
                {
                    "date": 1749411813719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,42 @@\n <?php\r\n-// Helper file para sa student ID generation\r\n-\r\n-// Function to generate student ID based on program\r\n+// Function to generate student ID\r\n function generateStudentId($conn, $program) {\r\n     $year = date('y');\r\n-\r\n     $programCodes = [\r\n         'Information Technology' => 'IT',\r\n-        'Hotel and Restaurant Management Technology' => 'HRMT', \r\n+        'Hotel and Restaurant Management Technology' => 'HRMT',\r\n         'Electronics and Computer Technology' => 'ECT',\r\n         'Hospitality Services technology' => 'HST',\r\n         'Techncal Vocational Education Techonlogy' => 'TVET',\r\n         'Enterpreneurship Technology' => 'ET',\r\n     ];\r\n-\r\n     $programCode = $programCodes[$program] ?? 'GEN';\r\n     $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n \r\n-    $stmt = $conn->prepare(\"\r\n-        SELECT student_id \r\n-        FROM students \r\n-        WHERE student_id LIKE ? \r\n-        ORDER BY student_id DESC \r\n-        LIMIT 1\r\n-    \");\r\n+    $stmt = $conn->prepare(\"SELECT student_id FROM students WHERE student_id LIKE ? ORDER BY student_id DESC LIMIT 1\");\r\n     $likePattern = $basePattern . '%';\r\n     $stmt->bind_param(\"s\", $likePattern);\r\n     $stmt->execute();\r\n     $result = $stmt->get_result();\r\n     $lastId = $result->fetch_column();\r\n \r\n-    if ($lastId) {\r\n-        $lastNumber = intval(substr($lastId, -4));\r\n-        $newNumber = $lastNumber + 1;\r\n-    } else {\r\n-        $newNumber = 1;\r\n-    }\r\n-\r\n+    $newNumber = $lastId ? intval(substr($lastId, -4)) + 1 : 1;\r\n     $formattedNumber = str_pad($newNumber, 4, '0', STR_PAD_LEFT);\r\n     return $basePattern . $formattedNumber;\r\n }\r\n \r\n+// Function to update student ID\r\n function updateStudentId($conn, $oldId, $newId) {\r\n     $conn->begin_transaction();\r\n     try {\r\n         $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newId, $oldId);\r\n-        if (!$stmt->execute()) {\r\n-            throw new Exception(\"Failed to update students table\");\r\n-        }\r\n+        if (!$stmt->execute()) throw new Exception(\"Failed to update students table\");\r\n \r\n         $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n         $stmt->bind_param(\"ss\", $newId, $oldId);\r\n-        if (!$stmt->execute()) {\r\n-            throw new Exception(\"Failed to update enrollments table\");\r\n-        }\r\n+        if (!$stmt->execute()) throw new Exception(\"Failed to update enrollments table\");\r\n \r\n         $conn->commit();\r\n         return true;\r\n     } catch (Exception $e) {\r\n"
                }
            ],
            "date": 1749397708971,
            "name": "Commit-0",
            "content": "<?php\r\n// Helper file para sa student ID generation\r\n// I-save mo ito sa same folder ng process-enrollment.php\r\n\r\n// Function to generate student ID based on program\r\nfunction generateStudentId($conn, $program) {\r\n    // Get current year (last 2 digits)\r\n    $year = date('y');\r\n    \r\n    // Map programs to their abbreviations\r\n    $programCodes = [\r\n        'Bachelor of Science in Information Technology' => 'IT',\r\n        'Bachelor of Science in Computer Science' => 'CS', \r\n        'Bachelor of Science in Business Administration' => 'BA',\r\n        'Bachelor of Science in Hospitality Management' => 'HRMT',\r\n        'Bachelor of Science in Tourism Management' => 'TM',\r\n        'Associate in Computer Technology' => 'ACT',\r\n        // Add more programs as needed\r\n        'ECT' => 'ECT',\r\n        'HST' => 'HST',\r\n        'TVET' => 'TVET'\r\n    ];\r\n    \r\n    // Get program code\r\n    $programCode = $programCodes[$program] ?? 'GEN'; // Default to 'GEN' if not found\r\n    \r\n    // Create the base pattern\r\n    $basePattern = \"TLGC-{$programCode}-{$year}-\";\r\n    \r\n    // Get the highest existing number for this pattern\r\n    $stmt = $conn->prepare(\"\r\n        SELECT student_id \r\n        FROM students \r\n        WHERE student_id LIKE ? \r\n        ORDER BY student_id DESC \r\n        LIMIT 1\r\n    \");\r\n    $stmt->bind_param(\"s\", $basePattern . '%');\r\n    $stmt->execute();\r\n    $result = $stmt->get_result();\r\n    $lastId = $result->fetch_column();\r\n    \r\n    if ($lastId) {\r\n        // Extract the number part and increment\r\n        $lastNumber = intval(substr($lastId, -4));\r\n        $newNumber = $lastNumber + 1;\r\n    } else {\r\n        // First student for this program/year\r\n        $newNumber = 1;\r\n    }\r\n    \r\n    // Format with leading zeros\r\n    $formattedNumber = str_pad($newNumber, 4, '0', STR_PAD_LEFT);\r\n    \r\n    return $basePattern . $formattedNumber;\r\n}\r\n\r\n// Function to update student ID\r\nfunction updateStudentId($conn, $oldStudentId, $newStudentId) {\r\n    try {\r\n        $conn->begin_transaction();\r\n        \r\n        // Update students table\r\n        $stmt = $conn->prepare(\"UPDATE students SET student_id = ? WHERE student_id = ?\");\r\n        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n        $stmt->execute();\r\n        \r\n        // Update enrollments table\r\n        $stmt = $conn->prepare(\"UPDATE enrollments SET student_id = ? WHERE student_id = ?\");\r\n        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n        $stmt->execute();\r\n        \r\n        // Update student_subjects table if it exists\r\n        $stmt = $conn->prepare(\"UPDATE student_subjects SET student_id = ? WHERE student_id = ?\");\r\n        $stmt->bind_param(\"ss\", $newStudentId, $oldStudentId);\r\n        $stmt->execute();\r\n        \r\n        $conn->commit();\r\n        return true;\r\n    } catch (Exception $e) {\r\n        $conn->rollback();\r\n        return false;\r\n    }\r\n}\r\n?>\r\n"
        }
    ]
}